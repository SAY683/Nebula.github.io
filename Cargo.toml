[package]
name = "Nebula"
version = "0.1.0"
edition = "2021"
[badges]
maintenance = { status = "InTheOptimization" }
# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
#async<+>async<+>async<+>async<+>async<+>async<+>async<+>async<+>async<+>
tokio = { version = "*", features = ["full"] }#:全域执行async/await>
futures = "*"#:区域执行async/await>
async-trait = "*"#:async-trait>
async-channel = "*"#:线程通信>
async-stream = "*"#:异步迭代>
deluge = { version = "*", features = ["tokio"] }#:异步流>
#async<+>async<+>async<+>async<+>async<+>async<+>async<+>async<+>async<+>

#database<+>database<+>database<+>database<+>database<+>database<+>database<+>
chrono = "*"#:Mysql|时间>
rbatis = { version = "*" }#:ORM(A)Mysql>
rbdc = "*"#:ORM(B)Mysql>
rbdc-mysql = "*"#:ORM(C)Mysql>
rbs = "*"#ORM(D)Mysql>
mysql_async = "*"#:Mysql语句执行>
#rayon = "*"#:微型本地数据库>
deadpool-redis = { version = "*", features = ["serde"] }#:Redis链接>
#database<+>database<+>database<+>database<+>database<+>database<+>database<+>

#serialization<+>serialization<+>serialization<+>serialization<+>serialization<+>
serde = { version = "*", features = ["derive"] }#:数据序列>
serde_json = "*"#:json序列>
data-encoding = "*"#:数据编码>
combine = "*"#:数据解析>
bytes = { version = "*", features = ["serde"] }#:|字节处理>
datafusion = "*"#:CSV数据查询>
quick-xml = { version = "*", features = ["serde", "async-tokio", "serialize"] }#:配置文件>
#serialization<+>serialization<+>serialization<+>serialization<+>serialization<+>

#thread<+>thread<+>thread<+>thread<+>thread<+>thread<+>thread<+>thread<+>thread<+>
#kanal = "0.1.0-pre4"#:线程通信Bata>
#thread_local = "*"#:线程通信副本>
async-backtrace = "*"#:异步线程记录>
#thread<+>thread<+>thread<+>thread<+>thread<+>thread<+>thread<+>thread<+>thread<+>

#dataInitial<+>dataInitial<+>dataInitial<+>dataInitial<+>dataInitial<+>dataInitial<+>
lazy_static = "*"#:惰性初始>
once_cell = "*"#:|Cell模式全局数据>
stretto = { version = "*", features = ["full"] }#:缓存>
arc-swap = "*"#:原子锁>
#dataInitial<+>dataInitial<+>dataInitial<+>dataInitial<+>dataInitial<+>dataInitial<+>

#dataOptimization<+>dataOptimization<+>dataOptimization<+>dataOptimization<+>dataOptimization<+>
ahash = "*"#:|哈希(安全)>
hashbrown = "*"#:|哈希(性能)>
#spin = "*"#:|自旋锁>
parking_lot = { version = "*", feature = ["const_fair_mutex", "const_mutex", "const_reentrant_mutex", "const_rwlock"] }#:数据锁>
compact_str = "*"#:String优化版>
#dataOptimization<+>dataOptimization<+>dataOptimization<+>dataOptimization<+>dataOptimization<+>

#eventHandling<+>eventHandling<+>eventHandling<+>eventHandling<+>eventHandling<+>eventHandling<+>
#num-bigint = { version = "*", features = ["rand"] }#:大随机(rand=0.8可兼容)>
anyhow = "*"#:Resultj兼容处理>
thiserror = "*"#:错误指定>
walkdir = "*"#:文件查询>
#log = { version = "*", features = ["std", "serde"] }#:log(A)>
#fast_log = "*"#:log(B)>
#ftlog = "*"#log(C)>
#flame = "*"#:测试生成界面>
opener = "*"#:默认开启>
whoami = "*"#:环境ID>
dotenv = "*"#:环境解析>
#eventHandling<+>eventHandling<+>eventHandling<+>eventHandling<+>eventHandling<+>eventHandling<+>

#network<+>network<+>network<+>network<+>network<+>network<+>network<+>network<+>network<+>
#s2n-quic = "*"#QUIC>
uuid = "*"#:ID
#http = "*"#:请求处理>
#reqwest = { version = "*", features = ["json", "socks", "stream", "blocking"] }#:http处理[单线程阻塞]>
#webpki-roots = "*"#:TLS证书>
#tokio-rustls = "*"#:AsyncTLS>
#tonic = { version = "*", features = ["async-trait", "tokio-rustls", "channel", "prost-derive", "prost", "gzip"] }#:gRPC>
#network<+>network<+>network<+>network<+>network<+>network<+>network<+>network<+>network<+>

#gui<+>gui<+>gui<+>gui<+>gui<+>gui<+>gui<+>gui<+>gui<+>gui<+>gui<+>gui<+>gui<+>gui<+>gui<+>
comfy-table = "*"#:Shll界面>
#symphonia = { version = "*", features = ["symphonia-format-isomp4", "symphonia-bundle-mp3"] }#:音频>
#clap = "*"#:Shll命令解析>
#gui<+>gui<+>gui<+>gui<+>gui<+>gui<+>gui<+>gui<+>gui<+>gui<+>gui<+>gui<+>gui<+>gui<+>gui<+>

#Web<+>Web<+>Web<+>Web<+>Web<+>Web<+>Web<+>Web<+>Web<+>Web<+>Web<+>Web<+>Web<+>Web<+>Web<+>
#scraper = "*"#:Css解析>
#lettre = "*"#:邮件传输A>
#lettre_email = "*"#<:邮件传输B>
#actix-cors = "*"#:WebA>
#actix-web = "*"#:WebB>
#actix-rt = "*"#:WebC>
#tower = { version = "*", features = ["full"] }#Web构建>
#jsonwebtoken = "*"#:json验证>
#Web<+>Web<+>Web<+>Web<+>Web<+>Web<+>Web<+>Web<+>Web<+>Web<+>Web<+>Web<+>Web<+>Web<+>Web<+>

#NativeLibrary<+>NativeLibrary<+>NativeLibrary<+>NativeLibrary<+>NativeLibrary<+>NativeLibrary<+>
#NativeLibrary<+>NativeLibrary<+>NativeLibrary<+>NativeLibrary<+>NativeLibrary<+>NativeLibrary<+>
[workspace]#[集中构建]
members = [""]
[build-dependencies]#:[构建包]
[lib]#[高可用库]
path = "./src/main.rs"
[profile.dev]#[Debug]
codegen-units = 64
[profile.release]#[Release]
opt-level = 3
codegen-units = 1
strip = true
lto = true
[profile.release.build-override]
opt-level = 3
codegen-units = 1
strip = true
#[source.ustc]
#registry = "git://mirrors.ustc.edu.cn/crates.io-index"
#源配置
#演示
#[[example]]
#name = "Nebula"
#path = "src/main.rs"
#++++++++++++++++++|++++++++++++|
#cargo new {%HOME%}|创建项目[bin]
#++++++++++++++++++|+++++|+++++++++++|
#cargo new --lib {%HOME%}|创建项目[lib]
#++++++++++++++++|+++++++|+++++++++++|
#cargo doc --open|文档生成
#+++++++++++|++++|+++++++|++++++++++++++++++|+++++++++++++++++++++++++|
#cargo test & cargo test -- --test-threads=1|测试 [test]测试,[ignore]忽略
#++++++++++++++++++++++++++++++++++++|++++++|++++|++++++++++++++++++++|
#cargo build & cargo build --release |构建
#+++++++++++++++++++++|++++++++++++++|++++++|
#cargo install --path |下载
#++++++++++++|++++++++|+++|
#cargo check |检查
#++++++++++++|+|+++|
#rustup update |更新
#++++++++++++++|+++++++++++++++++++|+++++++++|
#rustup default stable/nightly/beta|默认版本切换
#++++++++++++++++++++++|+++++++++++|
#rustup toolchain list |模式查看
#+++++++++++++++|++++++|
#rustc --version|查看版本
#+++++++++++++++|++|++++++++++++++++++++++++++++++++++++++++++++++++++++++|
#cargo install crm |源更换 crm best[自动更换],crm publish官方源执行cargo publish
#+++++++++++++++|++|+++++++|++++++++++++++++++++++++++++++++++++++++++++++|
#rustup component add miri |测试代码 cargo miri[使用],cargo miri test[测试]
#++++++++++++++++++++++++++|+++++++++++++++++++++++++++++++++++++++++++|
#++++++++++++++++++++++++++|++++++++++++++++++++++++--doc